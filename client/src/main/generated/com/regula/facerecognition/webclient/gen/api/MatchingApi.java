/*
 * Regula Face Recognition Web API
 * Regula Face Recognition Web API
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.regula.facerecognition.webclient.gen.api;

import com.google.gson.reflect.TypeToken;
import com.regula.facerecognition.webclient.ApiCallback;
import com.regula.facerecognition.webclient.ApiClient;
import com.regula.facerecognition.webclient.ApiException;
import com.regula.facerecognition.webclient.ApiResponse;
import com.regula.facerecognition.webclient.Configuration;
import com.regula.facerecognition.webclient.Pair;
import com.regula.facerecognition.webclient.gen.model.CompareRequest;
import com.regula.facerecognition.webclient.gen.model.CompareResponse;
import com.regula.facerecognition.webclient.gen.model.DetectRequest;
import com.regula.facerecognition.webclient.gen.model.DetectResponse;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MatchingApi {
  private ApiClient localVarApiClient;

  public MatchingApi() {
    this(Configuration.getDefaultApiClient());
  }

  public MatchingApi(ApiClient apiClient) {
    this.localVarApiClient = apiClient;
  }

  public ApiClient getApiClient() {
    return localVarApiClient;
  }

  public void setApiClient(ApiClient apiClient) {
    this.localVarApiClient = apiClient;
  }

  /**
   * Build call for compare
   *
   * @param compareRequest (required)
   * @param _callback Callback for upload/download progress
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   * @http.response.details
   *     <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> Successful operation; return compare results with their score and similarity. </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad request. Check your input data. </td><td>  -  </td></tr>
   * <tr><td> 403 </td><td> Bad license. Either server or request does not contain valid license. </td><td>  -  </td></tr>
   * </table>
   */
  public okhttp3.Call compareCall(CompareRequest compareRequest, final ApiCallback _callback)
      throws ApiException {
    Object localVarPostBody = compareRequest;

    // create path and map variables
    String localVarPath = "/api/compare";

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();
    final String[] localVarAccepts = {"application/json"};
    final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) {
      localVarHeaderParams.put("Accept", localVarAccept);
    }

    final String[] localVarContentTypes = {"application/json"};
    final String localVarContentType =
        localVarApiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    String[] localVarAuthNames = new String[] {};
    return localVarApiClient.buildCall(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAuthNames,
        _callback);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call compareValidateBeforeCall(
      CompareRequest compareRequest, final ApiCallback _callback) throws ApiException {

    // verify the required parameter 'compareRequest' is set
    if (compareRequest == null) {
      throw new ApiException(
          "Missing the required parameter 'compareRequest' when calling compare(Async)");
    }

    okhttp3.Call localVarCall = compareCall(compareRequest, _callback);
    return localVarCall;
  }

  /**
   * Compare provided face images in all combinations and return similarity score for each pair.
   *
   * @param compareRequest (required)
   * @return CompareResponse
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *     response body
   * @http.response.details
   *     <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> Successful operation; return compare results with their score and similarity. </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad request. Check your input data. </td><td>  -  </td></tr>
   * <tr><td> 403 </td><td> Bad license. Either server or request does not contain valid license. </td><td>  -  </td></tr>
   * </table>
   */
  public CompareResponse compare(CompareRequest compareRequest) throws ApiException {
    ApiResponse<CompareResponse> localVarResp = compareWithHttpInfo(compareRequest);
    return localVarResp.getData();
  }

  /**
   * Compare provided face images in all combinations and return similarity score for each pair.
   *
   * @param compareRequest (required)
   * @return ApiResponse&lt;CompareResponse&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *     response body
   * @http.response.details
   *     <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> Successful operation; return compare results with their score and similarity. </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad request. Check your input data. </td><td>  -  </td></tr>
   * <tr><td> 403 </td><td> Bad license. Either server or request does not contain valid license. </td><td>  -  </td></tr>
   * </table>
   */
  public ApiResponse<CompareResponse> compareWithHttpInfo(CompareRequest compareRequest)
      throws ApiException {
    okhttp3.Call localVarCall = compareValidateBeforeCall(compareRequest, null);
    Type localVarReturnType = new TypeToken<CompareResponse>() {}.getType();
    return localVarApiClient.execute(localVarCall, localVarReturnType);
  }

  /**
   * Compare provided face images in all combinations and return similarity score for each pair.
   * (asynchronously)
   *
   * @param compareRequest (required)
   * @param _callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   * @http.response.details
   *     <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> Successful operation; return compare results with their score and similarity. </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad request. Check your input data. </td><td>  -  </td></tr>
   * <tr><td> 403 </td><td> Bad license. Either server or request does not contain valid license. </td><td>  -  </td></tr>
   * </table>
   */
  public okhttp3.Call compareAsync(
      CompareRequest compareRequest, final ApiCallback<CompareResponse> _callback)
      throws ApiException {

    okhttp3.Call localVarCall = compareValidateBeforeCall(compareRequest, _callback);
    Type localVarReturnType = new TypeToken<CompareResponse>() {}.getType();
    localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
    return localVarCall;
  }
  /**
   * Build call for detect
   *
   * @param detectRequest (required)
   * @param _callback Callback for upload/download progress
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   * @http.response.details
   *     <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> Successful operation; return detection faces with their coordinates. </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad request. Check your input data. </td><td>  -  </td></tr>
   * <tr><td> 403 </td><td> Bad license. Either server or request does not contain valid license. </td><td>  -  </td></tr>
   * </table>
   */
  public okhttp3.Call detectCall(DetectRequest detectRequest, final ApiCallback _callback)
      throws ApiException {
    Object localVarPostBody = detectRequest;

    // create path and map variables
    String localVarPath = "/api/detect";

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();
    final String[] localVarAccepts = {"application/json"};
    final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) {
      localVarHeaderParams.put("Accept", localVarAccept);
    }

    final String[] localVarContentTypes = {"application/json"};
    final String localVarContentType =
        localVarApiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    String[] localVarAuthNames = new String[] {};
    return localVarApiClient.buildCall(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAuthNames,
        _callback);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call detectValidateBeforeCall(
      DetectRequest detectRequest, final ApiCallback _callback) throws ApiException {

    // verify the required parameter 'detectRequest' is set
    if (detectRequest == null) {
      throw new ApiException(
          "Missing the required parameter 'detectRequest' when calling detect(Async)");
    }

    okhttp3.Call localVarCall = detectCall(detectRequest, _callback);
    return localVarCall;
  }

  /**
   * Detect facial coordinates
   *
   * @param detectRequest (required)
   * @return DetectResponse
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *     response body
   * @http.response.details
   *     <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> Successful operation; return detection faces with their coordinates. </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad request. Check your input data. </td><td>  -  </td></tr>
   * <tr><td> 403 </td><td> Bad license. Either server or request does not contain valid license. </td><td>  -  </td></tr>
   * </table>
   */
  public DetectResponse detect(DetectRequest detectRequest) throws ApiException {
    ApiResponse<DetectResponse> localVarResp = detectWithHttpInfo(detectRequest);
    return localVarResp.getData();
  }

  /**
   * Detect facial coordinates
   *
   * @param detectRequest (required)
   * @return ApiResponse&lt;DetectResponse&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *     response body
   * @http.response.details
   *     <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> Successful operation; return detection faces with their coordinates. </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad request. Check your input data. </td><td>  -  </td></tr>
   * <tr><td> 403 </td><td> Bad license. Either server or request does not contain valid license. </td><td>  -  </td></tr>
   * </table>
   */
  public ApiResponse<DetectResponse> detectWithHttpInfo(DetectRequest detectRequest)
      throws ApiException {
    okhttp3.Call localVarCall = detectValidateBeforeCall(detectRequest, null);
    Type localVarReturnType = new TypeToken<DetectResponse>() {}.getType();
    return localVarApiClient.execute(localVarCall, localVarReturnType);
  }

  /**
   * Detect facial coordinates (asynchronously)
   *
   * @param detectRequest (required)
   * @param _callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   * @http.response.details
   *     <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> Successful operation; return detection faces with their coordinates. </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad request. Check your input data. </td><td>  -  </td></tr>
   * <tr><td> 403 </td><td> Bad license. Either server or request does not contain valid license. </td><td>  -  </td></tr>
   * </table>
   */
  public okhttp3.Call detectAsync(
      DetectRequest detectRequest, final ApiCallback<DetectResponse> _callback)
      throws ApiException {

    okhttp3.Call localVarCall = detectValidateBeforeCall(detectRequest, _callback);
    Type localVarReturnType = new TypeToken<DetectResponse>() {}.getType();
    localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
    return localVarCall;
  }
}
