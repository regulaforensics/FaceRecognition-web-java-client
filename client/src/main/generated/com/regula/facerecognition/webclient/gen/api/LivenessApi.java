/*
 * Regula Face Recognition Web API
 * Regula Face Recognition Web API
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.regula.facerecognition.webclient.gen.api;

import com.regula.facerecognition.webclient.ApiCallback;
import com.regula.facerecognition.webclient.ApiClient;
import com.regula.facerecognition.webclient.ApiException;
import com.regula.facerecognition.webclient.ApiResponse;
import com.regula.facerecognition.webclient.Configuration;
import com.regula.facerecognition.webclient.Pair;
import com.regula.facerecognition.webclient.ProgressRequestBody;
import com.regula.facerecognition.webclient.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.regula.facerecognition.webclient.gen.model.DepthLiveness;
import java.io.File;
import com.regula.facerecognition.webclient.gen.model.ImageLiveness;
import com.regula.facerecognition.webclient.gen.model.LivenessResultItem;
import com.regula.facerecognition.webclient.gen.model.OperationLog;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class LivenessApi {
    private ApiClient localVarApiClient;

    public LivenessApi() {
        this(Configuration.getDefaultApiClient());
    }

    public LivenessApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for checkDepthLiveness
     * @param depthLiveness  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation; return detected faces with their liveness status. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Check your input data. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad license. Either server or request does not contain valid license. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call checkDepthLivenessCall(DepthLiveness depthLiveness, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = depthLiveness;

        // create path and map variables
        String localVarPath = "/liveness/depth";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call checkDepthLivenessValidateBeforeCall(DepthLiveness depthLiveness, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'depthLiveness' is set
        if (depthLiveness == null) {
            throw new ApiException("Missing the required parameter 'depthLiveness' when calling checkDepthLiveness(Async)");
        }
        

        okhttp3.Call localVarCall = checkDepthLivenessCall(depthLiveness, _callback);
        return localVarCall;

    }

    /**
     * Detect faces from the images and check their liveness status. Liveness status depends on color depth.
     * 
     * @param depthLiveness  (required)
     * @return List&lt;LivenessResultItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation; return detected faces with their liveness status. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Check your input data. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad license. Either server or request does not contain valid license. </td><td>  -  </td></tr>
     </table>
     */
    public List<LivenessResultItem> checkDepthLiveness(DepthLiveness depthLiveness) throws ApiException {
        ApiResponse<List<LivenessResultItem>> localVarResp = checkDepthLivenessWithHttpInfo(depthLiveness);
        return localVarResp.getData();
    }

    /**
     * Detect faces from the images and check their liveness status. Liveness status depends on color depth.
     * 
     * @param depthLiveness  (required)
     * @return ApiResponse&lt;List&lt;LivenessResultItem&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation; return detected faces with their liveness status. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Check your input data. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad license. Either server or request does not contain valid license. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<LivenessResultItem>> checkDepthLivenessWithHttpInfo(DepthLiveness depthLiveness) throws ApiException {
        okhttp3.Call localVarCall = checkDepthLivenessValidateBeforeCall(depthLiveness, null);
        Type localVarReturnType = new TypeToken<List<LivenessResultItem>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Detect faces from the images and check their liveness status. Liveness status depends on color depth. (asynchronously)
     * 
     * @param depthLiveness  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation; return detected faces with their liveness status. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Check your input data. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad license. Either server or request does not contain valid license. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call checkDepthLivenessAsync(DepthLiveness depthLiveness, final ApiCallback<List<LivenessResultItem>> _callback) throws ApiException {

        okhttp3.Call localVarCall = checkDepthLivenessValidateBeforeCall(depthLiveness, _callback);
        Type localVarReturnType = new TypeToken<List<LivenessResultItem>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for checkImageLiveness
     * @param imageLiveness  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation; return detected faces with their liveness status. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Check your input data. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad license. Either server or request does not contain valid license. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call checkImageLivenessCall(ImageLiveness imageLiveness, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = imageLiveness;

        // create path and map variables
        String localVarPath = "/liveness/image";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call checkImageLivenessValidateBeforeCall(ImageLiveness imageLiveness, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'imageLiveness' is set
        if (imageLiveness == null) {
            throw new ApiException("Missing the required parameter 'imageLiveness' when calling checkImageLiveness(Async)");
        }
        

        okhttp3.Call localVarCall = checkImageLivenessCall(imageLiveness, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param imageLiveness  (required)
     * @return List&lt;LivenessResultItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation; return detected faces with their liveness status. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Check your input data. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad license. Either server or request does not contain valid license. </td><td>  -  </td></tr>
     </table>
     */
    public List<LivenessResultItem> checkImageLiveness(ImageLiveness imageLiveness) throws ApiException {
        ApiResponse<List<LivenessResultItem>> localVarResp = checkImageLivenessWithHttpInfo(imageLiveness);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param imageLiveness  (required)
     * @return ApiResponse&lt;List&lt;LivenessResultItem&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation; return detected faces with their liveness status. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Check your input data. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad license. Either server or request does not contain valid license. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<LivenessResultItem>> checkImageLivenessWithHttpInfo(ImageLiveness imageLiveness) throws ApiException {
        okhttp3.Call localVarCall = checkImageLivenessValidateBeforeCall(imageLiveness, null);
        Type localVarReturnType = new TypeToken<List<LivenessResultItem>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param imageLiveness  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation; return detected faces with their liveness status. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Check your input data. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad license. Either server or request does not contain valid license. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call checkImageLivenessAsync(ImageLiveness imageLiveness, final ApiCallback<List<LivenessResultItem>> _callback) throws ApiException {

        okhttp3.Call localVarCall = checkImageLivenessValidateBeforeCall(imageLiveness, _callback);
        Type localVarReturnType = new TypeToken<List<LivenessResultItem>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for checkVideoLiveness
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation; return detected face with its liveness status. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Check your input data. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad license. Either server or request does not contain valid license. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call checkVideoLivenessCall(File body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/liveness";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/octet-stream"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call checkVideoLivenessValidateBeforeCall(File body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling checkVideoLiveness(Async)");
        }
        

        okhttp3.Call localVarCall = checkVideoLivenessCall(body, _callback);
        return localVarCall;

    }

    /**
     * Detect face from the video and check its liveness status.
     * 
     * @param body  (required)
     * @return LivenessResultItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation; return detected face with its liveness status. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Check your input data. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad license. Either server or request does not contain valid license. </td><td>  -  </td></tr>
     </table>
     */
    public LivenessResultItem checkVideoLiveness(File body) throws ApiException {
        ApiResponse<LivenessResultItem> localVarResp = checkVideoLivenessWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * Detect face from the video and check its liveness status.
     * 
     * @param body  (required)
     * @return ApiResponse&lt;LivenessResultItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation; return detected face with its liveness status. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Check your input data. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad license. Either server or request does not contain valid license. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LivenessResultItem> checkVideoLivenessWithHttpInfo(File body) throws ApiException {
        okhttp3.Call localVarCall = checkVideoLivenessValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<LivenessResultItem>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Detect face from the video and check its liveness status. (asynchronously)
     * 
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation; return detected face with its liveness status. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Check your input data. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad license. Either server or request does not contain valid license. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call checkVideoLivenessAsync(File body, final ApiCallback<LivenessResultItem> _callback) throws ApiException {

        okhttp3.Call localVarCall = checkVideoLivenessValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<LivenessResultItem>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
