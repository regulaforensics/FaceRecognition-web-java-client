/*
 * Regula Face Recognition Web API
 * Regula Face Recognition Web API
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.regula.facerecognition.webclient.gen.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.regula.facerecognition.webclient.gen.model.FaceRecognitionResultCode;
import com.regula.facerecognition.webclient.gen.model.LivenessStatus;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * LivenessResultItem
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class LivenessResultItem {
  public static final String SERIALIZED_NAME_FACE = "face";
  @SerializedName(SERIALIZED_NAME_FACE)
  private byte[] face;

  public static final String SERIALIZED_NAME_LIVENESS_STATUS = "livenessStatus";
  @SerializedName(SERIALIZED_NAME_LIVENESS_STATUS)
  private LivenessStatus livenessStatus;

  public static final String SERIALIZED_NAME_CODE = "code";
  @SerializedName(SERIALIZED_NAME_CODE)
  private FaceRecognitionResultCode code;

  public static final String SERIALIZED_NAME_INDEX = "index";
  @SerializedName(SERIALIZED_NAME_INDEX)
  private int index;


  public LivenessResultItem face(byte[] face) {
    
    this.face = face;
    return this;
  }

   /**
   * Base64 encoded image
   * @return face
  **/
  @ApiModelProperty(required = true, value = "Base64 encoded image")

  public byte[] getFace() {
    return face;
  }


  public void setFace(byte[] face) {
    this.face = face;
  }


  public LivenessResultItem livenessStatus(LivenessStatus livenessStatus) {
    
    this.livenessStatus = livenessStatus;
    return this;
  }

   /**
   * Get livenessStatus
   * @return livenessStatus
  **/
  @ApiModelProperty(required = true, value = "")

  public LivenessStatus getLivenessStatus() {
    return livenessStatus;
  }


  public void setLivenessStatus(LivenessStatus livenessStatus) {
    this.livenessStatus = livenessStatus;
  }


  public LivenessResultItem code(FaceRecognitionResultCode code) {
    
    this.code = code;
    return this;
  }

   /**
   * Get code
   * @return code
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public FaceRecognitionResultCode getCode() {
    return code;
  }


  public void setCode(FaceRecognitionResultCode code) {
    this.code = code;
  }


  public LivenessResultItem index(int index) {
    
    this.index = index;
    return this;
  }

   /**
   * Get index
   * @return index
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public int getIndex() {
    return index;
  }


  public void setIndex(int index) {
    this.index = index;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LivenessResultItem livenessResultItem = (LivenessResultItem) o;
    return Arrays.equals(this.face, livenessResultItem.face) &&
        Objects.equals(this.livenessStatus, livenessResultItem.livenessStatus) &&
        Objects.equals(this.code, livenessResultItem.code) &&
        Objects.equals(this.index, livenessResultItem.index);
  }

  @Override
  public int hashCode() {
    return Objects.hash(Arrays.hashCode(face), livenessStatus, code, index);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LivenessResultItem {\n");
    sb.append("    face: ").append(toIndentedString(face)).append("\n");
    sb.append("    livenessStatus: ").append(toIndentedString(livenessStatus)).append("\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    index: ").append(toIndentedString(index)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

