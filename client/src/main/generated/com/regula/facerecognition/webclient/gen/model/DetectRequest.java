/*
 * Regula Face Recognition Web API
 * Regula Face Recognition Web API
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.regula.facerecognition.webclient.gen.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * DetectRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class DetectRequest {
  public static final String SERIALIZED_NAME_IMAGE = "image";
  @SerializedName(SERIALIZED_NAME_IMAGE)
  private byte[] image;

  public static final String SERIALIZED_NAME_ONLY_CENTRAL_FACE = "only_central_face";
  @SerializedName(SERIALIZED_NAME_ONLY_CENTRAL_FACE)
  private Boolean onlyCentralFace = false;


  public DetectRequest image(byte[] image) {
    
    this.image = image;
    return this;
  }

   /**
   * Base64 encoded image
   * @return image
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Base64 encoded image")

  public byte[] getImage() {
    return image;
  }


  public void setImage(byte[] image) {
    this.image = image;
  }


  public DetectRequest onlyCentralFace(Boolean onlyCentralFace) {
    
    this.onlyCentralFace = onlyCentralFace;
    return this;
  }

   /**
   * True - main face; false - all faces.
   * @return onlyCentralFace
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "True - main face; false - all faces.")

  public Boolean getOnlyCentralFace() {
    return onlyCentralFace;
  }


  public void setOnlyCentralFace(Boolean onlyCentralFace) {
    this.onlyCentralFace = onlyCentralFace;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DetectRequest detectRequest = (DetectRequest) o;
    return Arrays.equals(this.image, detectRequest.image) &&
        Objects.equals(this.onlyCentralFace, detectRequest.onlyCentralFace);
  }

  @Override
  public int hashCode() {
    return Objects.hash(Arrays.hashCode(image), onlyCentralFace);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DetectRequest {\n");
    sb.append("    image: ").append(toIndentedString(image)).append("\n");
    sb.append("    onlyCentralFace: ").append(toIndentedString(onlyCentralFace)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

